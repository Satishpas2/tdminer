/*
 * IntervalInputPanel.java
 *
 * Created on May 3, 2006, 1:24 PM
 */

package edu.iisc.tdminer.gui;

import edu.iisc.tdminercore.data.Interval;
import edu.iisc.tdminercore.miner.SessionInfo;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author patnaik
 * @author phreed@gmail.com
 */
public class RigidDelayInputPanel extends javax.swing.JPanel
{
    private AbstractTableModel tableModel;
    private List<Interval> intervalsList = new ArrayList<Interval>();
    private JDialog dialog;
    
    private SessionInfo session;
    
    /** Creates new form IntervalInputPanel */
    public RigidDelayInputPanel(JDialog dialog, SessionInfo session)
    {
        this.dialog = dialog;
        this.session = session;
        initComponents();
        jTextFieldBinSize.setText(Double.toString(session.getTimeGranularity()));
    }
    
    private AbstractTableModel getTableModel()
    {
        if (tableModel == null)
        {
            tableModel = new AbstractTableModel()
            {
                private String[] columnNames = {"Select", "Interval"};
                
                Class[] types = new Class [] {
                    Boolean.class, String.class
                };
                
                public int getColumnCount()
                {
                    return columnNames.length;
                }
                
                public int getRowCount()
                {
                    if (intervalsList != null) return intervalsList.size();
                    return 0;
                }
                
                @Override
                public String getColumnName(int col)
                {
                    return columnNames[col];
                }
                
                public Object getValueAt(int row, int col)
                {
                    Object retVal = null;
                    
                    Interval iVal = (Interval)intervalsList.get(row);
                    switch (col)
                    {
                        case 0:
                            retVal = new Boolean(true);
                            break;
                        case 1:
                            retVal = iVal.toString();
                            break;
                    }
                    return retVal;
                }
                
                @Override
                public Class getColumnClass(int columnIndex)
                {
                    return types [columnIndex];
                }
                
                @Override
                public boolean isCellEditable(int row, int col)
                {
                    if (col == 0)
                        return true;
                    else
                        return false;
                }
                
                @Override
                public void setValueAt(Object value, int row, int col)
                {
                    boolean val = ((Boolean)value).booleanValue();
                    if (col == 0)
                    {
                        intervalsList.remove(row);
                        fireTableDataChanged();
                    }
                }
            };
        }
        
        return tableModel;
    }
    
    /**
     * The intervals list changes based on the usage
     */
    public List getTimeIntervalsList()
    {
        return intervalsList;
    }
    public void setTimeIntervalsList(List intervalsList)
    {
        this.intervalsList = intervalsList;
    }
    
    public void parseIntervals()
    {
        try
        {
            List<Interval> newIntervalsList = new ArrayList<Interval>();
            String[] lines = jTextAreaIntervals.getText().split("\n");
            for(String line : lines)
            {
                if (line.length() < 1) continue;
                
                Interval ivl = Interval.parse(line);
                newIntervalsList.add(ivl);
            }
            intervalsList = newIntervalsList;
            tableModel.fireTableDataChanged();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error in parsing intervals",
                    JOptionPane.ERROR_MESSAGE);
            jTabbedPaneIntervals.setSelectedIndex(1);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneIntervals = new javax.swing.JTabbedPane();
        jPanelInteractive = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelHigh = new javax.swing.JLabel();
        jTextFieldTHigh = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonAdd = new javax.swing.JButton();
        jPanelBatch = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaIntervals = new javax.swing.JTextArea();
        jLabelBinSize = new javax.swing.JLabel();
        jTextFieldBinSize = new javax.swing.JTextField();
        jButtonOk = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Rigid Delays"));

        jTabbedPaneIntervals.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneIntervalsStateChanged(evt);
            }
        });

        jTable1.setModel(getTableModel());
        jScrollPane1.setViewportView(jTable1);

        jLabelHigh.setText("<html>Delay T =</html>");

        jLabel1.setText("x BinSize");

        jButtonAdd.setText("Add");
        jButtonAdd.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelInteractiveLayout = new org.jdesktop.layout.GroupLayout(jPanelInteractive);
        jPanelInteractive.setLayout(jPanelInteractiveLayout);
        jPanelInteractiveLayout.setHorizontalGroup(
            jPanelInteractiveLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelInteractiveLayout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jLabelHigh)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextFieldTHigh, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .add(10, 10, 10)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonAdd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        jPanelInteractiveLayout.setVerticalGroup(
            jPanelInteractiveLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelInteractiveLayout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelInteractiveLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonAdd)
                    .add(jLabelHigh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldTHigh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        jTabbedPaneIntervals.addTab("Delays", jPanelInteractive);

        jTextAreaIntervals.setColumns(20);
        jTextAreaIntervals.setRows(5);
        jScrollPane2.setViewportView(jTextAreaIntervals);

        org.jdesktop.layout.GroupLayout jPanelBatchLayout = new org.jdesktop.layout.GroupLayout(jPanelBatch);
        jPanelBatch.setLayout(jPanelBatchLayout);
        jPanelBatchLayout.setHorizontalGroup(
            jPanelBatchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        jPanelBatchLayout.setVerticalGroup(
            jPanelBatchLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
        );

        jTabbedPaneIntervals.addTab("Details", jPanelBatch);

        jLabelBinSize.setText("BinSize =");

        jTextFieldBinSize.setEditable(false);

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jLabel2.setText("in sec");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(jLabelBinSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextFieldBinSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addContainerGap(63, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(97, 97, 97)
                .add(jButtonOk)
                .addContainerGap(82, Short.MAX_VALUE))
            .add(jTabbedPaneIntervals, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelBinSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldBinSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPaneIntervals, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonOk))
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void jTabbedPaneIntervalsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jTabbedPaneIntervalsStateChanged
    {//GEN-HEADEREND:event_jTabbedPaneIntervalsStateChanged
// TODO add your handling code here:
        //System.out.println("Selected Pane = " + jTabbedPaneIntervals.getSelectedIndex());
        switch(jTabbedPaneIntervals.getSelectedIndex())
        {
            case 0:
                //Parse text into intervals
                parseIntervals();
                break;
            case 1:
                //Convert intervals into text
                StringBuffer buf = new StringBuffer();
                for(Interval ivl:intervalsList)
                {
                    buf.append(ivl.toString());
                    buf.append("\n");
                }
                jTextAreaIntervals.setText(buf.toString());
                break;
        }
        
    }//GEN-LAST:event_jTabbedPaneIntervalsStateChanged
    
    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonOkActionPerformed
    {//GEN-HEADEREND:event_jButtonOkActionPerformed
        dialog.setVisible(false);
        dialog.dispose();
    }//GEN-LAST:event_jButtonOkActionPerformed
    
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddActionPerformed
    {//GEN-HEADEREND:event_jButtonAddActionPerformed
        try
        {
            int i = Integer.parseInt(jTextFieldTHigh.getText());
            double tHigh = i * session.getTimeGranularity();
            Interval iVal = new Interval(tHigh, tHigh);
            intervalsList.add(iVal);
            tableModel.fireTableDataChanged();
            jTextFieldTHigh.setText(Integer.toString(i+1));
            jTextFieldTHigh.requestFocusInWindow();
        }
        catch (NumberFormatException nfe)
        {
            JOptionPane.showMessageDialog(this, nfe.getMessage(), "Error reading parameters", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButtonAddActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelBinSize;
    private javax.swing.JLabel jLabelHigh;
    private javax.swing.JPanel jPanelBatch;
    private javax.swing.JPanel jPanelInteractive;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneIntervals;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaIntervals;
    private javax.swing.JTextField jTextFieldBinSize;
    private javax.swing.JTextField jTextFieldTHigh;
    // End of variables declaration//GEN-END:variables
    
}
